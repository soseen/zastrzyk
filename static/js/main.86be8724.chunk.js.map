{"version":3,"sources":["audio/notification.mp3","components/Clock.jsx","components/Injection.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Clock","date","time","getHours","toLocaleString","slice","getMinutes","getSeconds","className","Injection","scheduledHour","useState","injectionDone","setInjectionDone","highlight","setHighlight","audio","Audio","notification","useEffect","console","log","play","onClick","e","App","Date","setDate","interval","setInterval","clearInterval","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mHAAAA,EAAOC,QAAU,IAA0B,0C,gKCiB5BC,G,MAbD,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAENC,GAAQ,IAAMD,EAAKE,WAAWC,kBAAkBC,OAAO,GAAK,OAAS,IAAMJ,EAAKK,cAAcD,OAAO,GAAK,OAAS,IAAMJ,EAAKM,cAAcF,OAAO,GAIzJ,OACI,yBAAKG,UAAU,SACX,uBAAGA,UAAU,QAAQN,M,gBC2BlBO,EAlCG,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,cAAeT,EAAU,EAAVA,KAAU,EAECU,oBAAS,GAFV,mBAElCC,EAFkC,KAEnBC,EAFmB,OAGPF,oBAAS,GAHF,mBAGlCG,EAHkC,KAGvBC,EAHuB,KAInCC,EAAQ,IAAIC,MAAMC,KAExBC,qBAAU,YACW,IAAdL,IAAyC,IAAlBF,GAA4BF,EAAgBT,EAAKE,aAAgB,GAAKF,EAAKK,cAAgB,IACjHc,QAAQC,IAAIX,GACZK,GAAa,GACbC,EAAMM,SACc,IAAdR,IAAwC,IAAlBF,GAA4BF,EAAgBT,EAAKE,aAAgB,GAC7FY,GAAa,KAElB,CAACD,EAAWF,EAAeX,EAAMS,IAUpC,OACI,yBAAKa,QARe,SAACC,IACjBZ,GAAiBE,GACjBC,GAAa,GAEjBF,GAAkBD,IAIaJ,UAAS,oBAAeI,EAAgB,WAAa,GAA5C,YAAkDE,EAAY,cAAgB,KAClH,yBAAKN,UAAU,yBACX,uCACA,qCAAOE,EAAP,WCFDe,MAzBf,WAAgB,IAAD,EAEWd,mBAAS,IAAIe,MAFxB,mBAENzB,EAFM,KAEA0B,EAFA,KAeb,OAPAR,qBAAU,WACR,IAAMS,EAAWC,aAAY,WACzBF,EAAQ,IAAID,QACb,KACH,OAAO,kBAAMI,cAAcF,MAC1B,IAGD,yBAAKpB,UAAU,OACX,kBAAC,EAAD,CAAOP,KAAMA,IACb,kBAAC,EAAD,CAAWS,cAfe,EAeyBT,KAAMA,IACzD,kBAAC,EAAD,CAAWS,cAfe,GAeyBT,KAAMA,IACzD,kBAAC,EAAD,CAAWS,cAfe,GAeyBT,KAAMA,MCd7C8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.86be8724.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/notification.4e6ff350.mp3\";","import React from 'react'\r\nimport { useState } from 'react'\r\n\r\n\r\nconst Clock = ({date}) => {\r\n\r\n    const time = (`0` + date.getHours().toLocaleString()).slice(-2) + ' : ' + (`0` + date.getMinutes()).slice(-2) + ' : ' + (`0` + date.getSeconds()).slice(-2);\r\n\r\n    \r\n\r\n    return(\r\n        <div className='clock'>\r\n            <p className='time'>{time}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Clock","import React from 'react'\r\nimport { useState } from 'react'\r\nimport { useEffect } from 'react';\r\nimport notification from '../audio/notification.mp3'\r\n\r\nconst Injection = ({scheduledHour, date}) => {\r\n\r\n    const [injectionDone, setInjectionDone] = useState(false);\r\n    const [highlight, setHighlight] = useState(false);\r\n    const audio = new Audio(notification);\r\n\r\n    useEffect(() => {\r\n        if(highlight === false && injectionDone === false && (scheduledHour - date.getHours()) === 1 && date.getMinutes() >= 40){\r\n            console.log(scheduledHour);\r\n            setHighlight(true);\r\n            audio.play();\r\n        } else if(highlight === true && injectionDone === false && (scheduledHour - date.getHours()) !== 1){\r\n            setHighlight(false);\r\n        }\r\n    }, [highlight, injectionDone, date, scheduledHour]);\r\n\r\n\r\n    const handleInjection = (e) => {\r\n        if(!injectionDone && highlight){\r\n            setHighlight(false);\r\n        }\r\n        setInjectionDone(!injectionDone);\r\n    }\r\n\r\n    return(\r\n        <div onClick={handleInjection} className={`injection ${injectionDone ? 'injected' : ''} ${highlight ? 'highlighted' : ''}`}>\r\n            <div className='injection-description'>\r\n                <p>Zastrzyk</p>\r\n                <p>{`${scheduledHour}:00`}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Injection","import React, { useEffect } from 'react'\nimport { useState } from 'react'\nimport '../styles/styles.css'\nimport Clock from './Clock'\nimport Injection from './Injection'\n\nfunction App() {\n  \n  const [date, setDate] = useState(new Date());\n  const scheduledInjectionHour1 = 9;\n  const scheduledInjectionHour2 = 18;\n  const scheduledInjectionHour3 = 22;\n  const scheduledInjections = [scheduledInjectionHour1, scheduledInjectionHour2, scheduledInjectionHour3];\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n        setDate(new Date());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"App\">\n        <Clock date={date}/>\n        <Injection scheduledHour={scheduledInjectionHour1} date={date} />\n        <Injection scheduledHour={scheduledInjectionHour2} date={date} />\n        <Injection scheduledHour={scheduledInjectionHour3} date={date} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}