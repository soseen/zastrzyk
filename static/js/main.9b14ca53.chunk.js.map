{"version":3,"sources":["components/Clock.jsx","components/Injection.jsx","components/NewInjectionRule.jsx","data/injections.js","components/App.jsx","serviceWorker.js","index.js","audio/notification.mp3"],"names":["Clock","date","time","getHours","toLocaleString","slice","getMinutes","getSeconds","className","Injection","injection","removeInjection","useState","injectionDone","setInjectionDone","highlight","setHighlight","audio","Audio","notification","useEffect","scheduledHour","reminderDuration","play","interval","setInterval","clearInterval","onClick","e","class","description","NewInjectionRule","injections","addInjection","isFormActive","setIsFormActive","setInjection","handleChange","target","name","value","type","parseInt","console","log","maxLength","onChange","min","max","noDuplicates","forEach","element","App","Date","setDate","defaultInjections","setInjections","filter","item","map","sort","a","b","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.9b14ca53.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useState } from 'react'\r\n\r\n\r\nconst Clock = ({date}) => {\r\n\r\n    const time = (`0` + date.getHours().toLocaleString()).slice(-2) + ' : ' + (`0` + date.getMinutes()).slice(-2) + ' : ' + (`0` + date.getSeconds()).slice(-2);\r\n\r\n    \r\n\r\n    return(\r\n        <div className='clock'>\r\n            <p className='time'>{time}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Clock","import React from 'react'\r\nimport { useState } from 'react'\r\nimport { useEffect } from 'react';\r\nimport notification from '../audio/notification.mp3'\r\n\r\nconst Injection = ({injection, date, removeInjection}) => {\r\n\r\n    const [injectionDone, setInjectionDone] = useState(false);\r\n    const [highlight, setHighlight] = useState(false);\r\n    const audio = new Audio(notification);\r\n\r\n    useEffect(() => {\r\n        if(highlight === false && injectionDone === false && (injection.scheduledHour - date.getHours()) === 1 && date.getMinutes() >= (60 - injection.reminderDuration)){\r\n            setHighlight(true);\r\n            audio.play();\r\n        } else if (highlight === true && injection.scheduledHour - date.getHours() !== 1){\r\n            setHighlight(false);\r\n        }\r\n    }, [highlight, injectionDone, date, injection]);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            if(highlight){\r\n                audio.play();\r\n            }\r\n        }, 60000);\r\n        return () => clearInterval(interval);\r\n      }, [highlight]);\r\n\r\n      useEffect(() => {\r\n        if(date.getHours() === 0 && date.getMinutes() === 0){\r\n            setInjectionDone(false);\r\n        }\r\n      }, [date]);\r\n\r\n    const handleInjection = (e) => {\r\n        if(!injectionDone && highlight){\r\n            setHighlight(false);\r\n        }\r\n        setInjectionDone(!injectionDone);\r\n    }\r\n\r\n\r\n    return(\r\n        <div onClick={handleInjection} className={`injection ${injectionDone ? 'injected' : ''} ${highlight ? 'highlighted' : ''}`}>\r\n            <div className='injection-description'>\r\n                <div className='desc'>\r\n                    <div className='remove-injection-button' onClick={e => removeInjection(injection)}>\r\n                    <i class=\"fa fa-trash\"></i>\r\n                    </div>\r\n                    <p>{injection.description}</p>\r\n                </div>\r\n                <div className='schedule'>\r\n                    <p>{`${injection.scheduledHour}:00`}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Injection","import React, { useEffect, useState } from 'react';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\n\r\nconst NewInjectionRule = ({injections, addInjection}) => {\r\n\r\n    const defaultInj = {\r\n        description: 'Zastrzyk',\r\n        scheduledHour: 1,\r\n        reminderDuration: 20\r\n    }\r\n    \r\n    const [isFormActive, setIsFormActive] = useState(false);\r\n    const [injection, setInjection] = useState(defaultInj);\r\n\r\n    const displayForm = () => {\r\n        if(!isFormActive){\r\n            setIsFormActive(true);\r\n        }\r\n    }\r\n\r\n    const handleChange = ({target:{name,value,type}}) => {\r\n        setInjection({...injection, [name]: name === 'scheduledHour' || name === 'reminderDuration' ? parseInt(value) : value});\r\n        console.log(value);\r\n    }\r\n\r\n    const handleNewInjection = () => {\r\n        let noDuplicates = true;\r\n        injections.forEach(element => {\r\n            console.log(element);\r\n            if(element.scheduledHour === injection.scheduledHour){\r\n                noDuplicates = false;\r\n            }\r\n        });\r\n\r\n        if(noDuplicates){\r\n            addInjection(injection)\r\n            setIsFormActive(false);\r\n        }\r\n    }\r\n    \r\n    return(\r\n        <div className='new-injection'>\r\n            <div className='new-injection-button' onClick={displayForm}>\r\n                <i class=\"fa fa-plus\"></i>\r\n            </div>\r\n            {isFormActive &&\r\n                <div className='new-injection-form'>\r\n                    <div className='form-inputs-row'>\r\n                        <div className='form-inputs-column'>\r\n                            <label>Descritpion</label>\r\n                            <input className='description-input' type='text' name='description' maxLength={10} value={injection.description} onChange={handleChange}></input>\r\n                        </div>\r\n                    </div>\r\n                    <div className='form-inputs-row'>\r\n                        <div className='form-inputs-column'>\r\n                            <label>Time of injection</label>\r\n                            <select className='hour-input' name='scheduledHour' value={injection.scheduledHour} onChange={handleChange}>\r\n                                    <option value={1}>1:00</option>\r\n                                    <option value={2}>2:00</option>\r\n                                    <option value={3}>3:00</option>\r\n                                    <option value={4}>4:00</option>\r\n                                    <option value={5}>5:00</option>\r\n                                    <option value={6}>6:00</option>\r\n                                    <option value={7}>7:00</option>\r\n                                    <option value={8}>8:00</option>\r\n                                    <option value={9}>9:00</option>\r\n                                    <option value={10}>10:00</option>\r\n                                    <option value={11}>11:00</option>\r\n                                    <option value={12}>12:00</option>\r\n                                    <option value={13}>13:00</option>\r\n                                    <option value={14}>14:00</option>\r\n                                    <option value={15}>15:00</option>\r\n                                    <option value={16}>16:00</option>\r\n                                    <option value={17}>17:00</option>\r\n                                    <option value={18}>18:00</option>\r\n                                    <option value={19}>19:00</option>\r\n                                    <option value={20}>20:00</option>\r\n                                    <option value={21}>21:00</option>\r\n                                    <option value={22}>22:00</option>\r\n                                    <option value={23}>23:00</option>\r\n                                    <option value={0}>00:00</option>\r\n                            </select>\r\n                        </div>\r\n                        <div className='form-inputs-column'>\r\n                            <label>Reminder duration</label>\r\n                            <input className='minutes-input' type='number' name='reminderDuration' min={1} max={59} value={injection.reminderDuration} onChange={handleChange}></input>\r\n                        </div>\r\n                    </div>\r\n                    <button type='submit' onClick={handleNewInjection} className='add-injection-button'>Add</button>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NewInjectionRule","\r\nconst injections = [\r\n    {\r\n        description: 'Zastrzyk',\r\n        scheduledHour: 7,\r\n        reminderDuration: 20\r\n    },\r\n    {\r\n        description: 'Zastrzyk',\r\n        scheduledHour: 19,\r\n        reminderDuration: 20\r\n    }\r\n]\r\n\r\nexport default injections","import React, { useEffect } from 'react'\nimport { useState } from 'react'\nimport '../styles/styles.css'\nimport Clock from './Clock'\nimport Injection from './Injection'\nimport NewInjectionRule from './NewInjectionRule'\nimport defaultInjections from '../data/injections'\n\nconst App = () => {\n  \n  const [date, setDate] = useState(new Date());\n  const [injections, setInjections] = useState(defaultInjections);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n        setDate(new Date());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n\n  const addInjection = (injection) => {\n    setInjections(\n        [...injections, injection]\n          .sort((a,b) => a.scheduledHour - b.scheduledHour)\n    );\n  }\n\n  const removeInjection = (injection) => {\n    setInjections(\n      injections\n        .filter(item => item.scheduledHour !== injection.scheduledHour)\n    );\n  }\n\n  return (\n    <div className=\"App\">\n        <Clock date={date}/>\n        {injections.map((injection) => (\n          <Injection injection={injection} date={date} removeInjection={removeInjection} />\n        ))}\n        <NewInjectionRule injections={injections} addInjection={addInjection} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport 'font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/notification.4e6ff350.mp3\";"],"sourceRoot":""}